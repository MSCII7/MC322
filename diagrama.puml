@startuml
class Robo {
  #String nome
  #int posicaoX
  #int posicaoY
  #String direcao
  #String tipo
  #String id
  #String comandoTarefa
  #String descricaoTarefa
  #boolean ligado 
  #TipoEntidade tipoEntidade
  #SensorObstaculos so 
  #SensorRobos sr
  #ArrayList<Sensor> sensores {genericos}
  +getNome():String
  +ligar()
  +desligar
  +getEstado
  +getComandoTarefa
  +{abstract} void executarTarefa throws RoboDesligadoException
  +void imprimirDescricaoTarefa
  +exibirPosicao(): void
}
class RoboTerrestre {
    #int velocidadeMaxima
    +mover(int, int, Ambiente): void
    +getVelocidadeMaxima(): void
}
class RoboTerrestreEletrico {
    -int nivel_bateria
    +mover(int, int, Ambiente): void
    +carregar(): void
    +getNivel(): int
}
class RoboTerrestreTeletransporte {
    -int barra_teletransporte
    +mover(int, int, Ambiente): void
    +teletransportar(posX: int, posY: int): void
    +getBarra_teletransporte(): int
}
class RoboTerrestreAmbientalista {
    -int construcaoX
    -int construcaoY
    +@Overload construir(x: int, y:int, amb:Ambiente)
    +void executarTarefa(int,int,Ambiente)
}
class RoboTerrestreMorador {
    #Obstaculo moradia
}
class RoboTerrestrePanfletario {

}
class RoboAereo {
    #int posicaoZ
    #int altitudeMaxima
    +subir(deltaZ: int): void
    +descer(deltaZ: int): void
    +exibirPosicao(): void
    #adicionaSensores(amb: Ambiente): void
    +identificarObstaculo(Ambiente): ArrayList<Obstaculo>
    +getPosZ(): int
    +getAltiduteMaxima(): int
}
class RoboAereoConsciente {
    #int distaciaMin
    +subir(deltaZ: int, amb: Ambiente): void
    +descer(deltaZ: int, amb: Ambiente): void
    +mudarDistancia(deltaDist: int): void
}
class RoboAereoRefletor {
    #int altitudeMinima
    +subir(deltaZ: int, amb: Ambiente): void
    +descer(deltaZ: int, amb: Ambiente): void
}
abstract class Sensor {
    #double raio
    +{abstract} monitorar(amb: Ambiente, posX: int, posY: int, posZ: int): void
    +getRaio(): double
}
class SensorRobos {
    #ArrayList<Robo> robos_dentro
    +monitorar(amb: Ambiente, posX: int, posY: int, posZ: int): void
    +dentro_do_raio(posX: int, posY: int, posZ: int, robo: Robo, raio: double): boolean
    +getRobos_dentro(Ambiente): ArrayList<Robo>
}
class SensorObstaculos {
    #ArrayList<Obstaculo> obstaculos_dentro
    +monitorar(Ambiente amb, int posX, int posY, int posZ): void
    #dentro_do_raio(Obstaculo obs, int posX, int posY, int posZ): boolean
    #menor_dist(posX: int, posY: int, obs: Obstaculo): double
    +getObstaculos_dentro(Ambiente): ArrayList<Obstaculo>
}
class Ambiente {
   -int largura
   -int comprimento
   -int altura
   -ArrayList<Entidades> entidades
   -TipoEntidade[][][] mapa
   -ArrayList<Obstaculo> obstaculos
   +adicionarEntidade(ent: Entidade) throws EntidadeInvalidaException: void
   +removerEntidade(e: Entidade): void
   +getEntidades(): ArrayList<Entidade>
   +dentroDosLimites(x: int, y: int, z:int):boolean
   +estaOcupado(x:int,y:int,z:int):boolean
   +moverEntidade(e:Entidade):void
   +executarSensore(roboSensoreavel: Sensoreavel):void
   +verificarColisoes() throws ColisaoException: void
   +visualizarAmbiente():void
   +getAltura(): int
   +imprimirDimensoes(): void
   +inicializarmapa():void

}
class Obstaculo {
    -int posicaoX1
    -int posicaoX2
    -int posicaoY1
    -int posicaoY2
    -int altura
    -int centroX
    -int centroY 
    -TipoObstaculo tipo
    +exibirObstaculo(): void
    +getPosicaoX1(): int
    +getPosicaoX2(): int
    +getPosicaoY1(): int
    +getPosicaoY2(): int
    +getAltura(): int
    +getTipo(): TipoObstaculo
}
class CentralComunicacao {
    -static ArrayList<GrupoMensagemRobo> gruposMensagem
    +static registrarMensagem(Comunicavel remetente,Comunicavel dest, String):void
    +static exibirMensagens():void 
    +static  getGrupos():ArrayList<GruposMensagemRobo>
    +static removerMensagem:void 
}
class GrupoMensagemRobo {
    -Comunicavel remetente
    -Comunicavel destinatario
    +GrupoMensagemRobo(Comunicavel, Comunicavel, String)
    +getRemetente:Comunicavel 
    +getDestinatario:Comunicavel 
    +getMensagem():String 
}
enum TipoObstaculo {
    MURO,
    MEGAMURO,
    ARVORE,
    ARBUSTO,
    PREDIO;
}
enum TipoEntidade{
    VAZIO('-'),
    OBSTACULO('#'),
    ROBO('@'),
    DESCONHECIDO('?');
}
interface Entidade {
    int getX()
    int getY()
    int getZ()
    void moverPara(int, int,int) throws NaoAereoException, RoboDesligadoException
}
interface Comunicavel {
    void enviarMensagem(Comunicavel dest, String mensagem) throws RoboDesligadoException
    void receberMensage() throws RoboDesligadoException
}
interface Sensoreavel {
    void acionarSensore(Ambiente amb) throws RoboDesligadoException
}
interface Construtor {
    void construir(int x, int y, Ambiente amb)
}
interface Referenciavel {
    void setReferencia(Obstaculo ref)
    int getPosXReferencia(int x)
    int getPosYReferencia(int y)
    void encontraReferencia()
    Obstaculo getReferencia()
}
interface Carregavel{
    +getNivel(): int
    +carregar(): void
}
exception ColisaoException {
    +ColisaoException()
}
exception RoboDesligadoException {
    +RoboDesligadoException()
}
exception NaoAereoException {
    +NaoAereoException()
}
exception EntidadeInvalidaException {
    +EntidadeInvalidaException()
}
exception TipoIncompativelException {
    +TipoIncompativelException()
}


Referenciavel ..> TipoIncompativelException : «throws» 
Comunicavel "1" o-- "1" CentralComunicacao
CentralComunicacao o-- GrupoMensagemRobo
Ambiente ..> ColisaoException : «throws» 
Ambiente ..> EntidadeInvalidaException : «throws» 
Robo ..> NaoAereoException : «throws» 
Robo ..> RoboDesligadoException : «throws» 
RoboTerrestreEletrico ..|> Carregavel
RoboTerrestreTeletransporte ..|> Carregavel
RoboTerrestrePanfletario ..|> Comunicavel
RoboTerrestrePanfletario..|> Sensoreavel
RoboAereo ..|> Comunicavel
RoboAereoConsciente ..|> Sensoreavel
RoboTerrestreMorador ..|> Referenciavel
RoboTerrestreMorador ..|> Comunicavel
RoboTerrestreAmbientalista ..|> Construtor
Robo ..|> Entidade
Sensor <|-- SensorObstaculos
Sensor <|-- SensorRobos
Ambiente --> Sensor
Ambiente "1" o-- "*" Robo
Ambiente "1" o-- "*" Obstaculo
Robo "1" o-- "*" Sensor
RoboAereo <|-- RoboAereoRefletor
RoboAereo <|-- RoboAereoConsciente
RoboTerrestre <|-- RoboTerrestreTeletransporte
RoboTerrestre <|-- RoboTerrestreEletrico
RoboTerrestre <|-- RoboTerrestreAmbientalista
RoboTerrestre <|-- RoboTerrestreMorador
RoboTerrestre <|-- RoboTerrestrePanfletario
Robo <|-- RoboAereo
Robo <|-- RoboTerrestre
Obstaculo ..> TipoObstaculo
Entidade ..>TipoEntidade
@enduml
