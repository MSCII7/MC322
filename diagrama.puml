@startuml
class Robo {
  #String nome
  #int posicaoX
  #int posicaoY
  #String direcao
  #SensorObstaculos so 
  #SensorRobos sr
  #ArrayList<Sensor> sensores {genericos}
  +getPosX():int
  +getPosY():int
  +getNome():String
  +mover(deltaX: int, deltaY: int, Ambiente amb): void
  +exibirPosicao(): void
  +identidicarObstaculo(): ArrayList<Obstaculo>  
  +identificarRobos(): ArrayList<Robos>
  +colisao_obs(ArrayList<Obstaculo>, int, int): boolean
  +colisao_robo(ArrayList<Robo>, int, int): boolean
  #adicionaSensores(Ambiente): void

}
class RoboTerrestre {
    #int velocidadeMaxima
    +mover(int, int, Ambiente): void
    +getVelocidadeMaxima(): void
}
class RoboTerrestreEletrico {
    -int nivel_bateria
    +mover(int, int, Ambiente): void
    +carregar(): void
    +getNivel_bateria(): int
}
class RoboTerrestreTeletransporte {
    -int barra_teletransporte
    +mover(int, int, Ambiente): void
    +teletransportar(posX: int, posY: int): void
    +getBarra_teletransporte(): int
}
class RoboAereo {
    #int posicaoZ
    #int altitudeMaxima
    +subir(deltaZ: int): void
    +descer(deltaZ: int): void
    +exibirPosicao(): void
    #adicionaSensores(amb: Ambiente): void
    +identificarObstaculo(Ambiente): ArrayList<Obstaculo>
    +getPosZ(): int
    +getAltiduteMaxima(): int
}
class RoboAereoConsciente {
    #int distaciaMin
    +subir(deltaZ: int, amb: Ambiente): void
    +descer(deltaZ: int, amb: Ambiente): void
    +mudarDistancia(deltaDist: int): void
}
class RoboAereoRefletor {
    #int altitudeMinima
    +subir(deltaZ: int, amb: Ambiente): void
    +descer(deltaZ: int, amb: Ambiente): void
}
abstract class Sensor {
    #double raio
    +{abstract} monitorar(amb: Ambiente, posX: int, posY: int, posZ: int): void
    +getRaio(): double
}
class SensorRobos {
    #ArrayList<Robo> robos_dentro
    +monitorar(amb: Ambiente, posX: int, posY: int, posZ: int): void
    +dentro_do_raio(posX: int, posY: int, posZ: int, robo: Robo, raio: double): boolean
    +getRobos_dentro(Ambiente): ArrayList<Robo>
}
class SensorObstaculos {
    #ArrayList<Obstaculo> obstaculos_dentro
    +monitorar(Ambiente amb, int posX, int posY, int posZ): void
    #dentro_do_raio(Obstaculo obs, int posX, int posY, int posZ): boolean
    #menor_dist(posX: int, posY: int, obs: Obstaculo): double
    +getObstaculos_dentro(Ambiente): ArrayList<Obstaculo>
}
class Ambiente {
   -int largura
   -int comprimento
   -int altura
   -ArrayList<Robo> robos
   -ArrayList<Obstaculo> obstaculos
   +dentroDosLimites(r: Robo): boolean 
   +adicionarRobo(r: Robo): void
   +removerRobo(r: Robo): void
   +getRobos(): ArrayList<Robo>
   +adicionarObstaculo(ob: Obstaculo): void
   +removerObstaculo(ob: Obstaculo): void
   +getObstaculos(): ArrayList<Obstaculo>
   +imprimirDimensoes(): void
}
class Obstaculo {
    -int posicaoX1
    -int posicaoX2
    -int posicaoY1
    -int posicaoY2
    -int altura
    -int centroX
    -int centroY 
    -TipoObstaculo tipo
    +exibirObstaculo(): void
    +getPosicaoX1(): int
    +getPosicaoX2(): int
    +getPosicaoY1(): int
    +getPosicaoY2(): int
    +getAltura(): int
    +getTipo(): TipoObstaculo
}
enum TipoObstaculo {
    MURO,
    MEGAMURO,
    ARVORE,
    ARBUSTO,
    PREDIO;
}

Sensor <|-- SensorObstaculos
Sensor <|-- SensorRobos
Ambiente --> Sensor
Ambiente "1" o-- "*" Robo
Ambiente "1" o-- "*" Obstaculo
Robo "1" o-- "*" Sensor
RoboAereo <|-- RoboAereoRefletor
RoboAereo <|-- RoboAereoConsciente
RoboTerrestre <|-- RoboTerrestreTeletransporte
RoboTerrestre <|-- RoboTerrestreEletrico
Robo <|-- RoboAereo
Robo <|-- RoboTerrestre
Obstaculo ..> TipoObstaculo
@enduml
